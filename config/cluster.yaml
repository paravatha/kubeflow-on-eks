# An example of ClusterConfig object using Managed Nodes
---
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: kubeflow
  region: us-east-1
  version: "1.25"
  tags:
    usage: kubeflow
    team: mlops
vpc:
  clusterEndpoints:
    publicAccess:  true
    privateAccess: true
iam:
  withOIDC: true

managedNodeGroups:
  - name: managed-ng-t2
    instanceType: t2.medium
    minSize: 1
    desiredCapacity: 1
    maxSize: 3
    volumeSize: 20
    privateNetworking: true
    labels: {ng: managed-ng-t2}
    tags:
      usage : kubeflow
      team: mlops
      nodegroup-role: managed-ng-t2

  - name: managed-ng-t3
    instanceType: t3.medium
    minSize: 1
    desiredCapacity: 1
    maxSize: 3
    volumeSize: 20
    privateNetworking: true
    labels: {ng: managed-ng-t3}
    tags:
      usage: kubeflow
      team: mlops
      nodegroup-role: managed-ng-t3

addons:
  - name: vpc-cni # no version is specified so it deploys the default version
    attachPolicyARNs:
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
    tags:
      usage: kubeflow
      team: mlops
  - name: coredns
    version: latest # auto discovers the latest available
    tags:
      usage: kubeflow
      team: mlops
  - name: kube-proxy
    version: latest
    tags:
      usage: kubeflow
      team: mlops
  - name: aws-ebs-csi-driver
    wellKnownPolicies:      # add IAM and service account
      ebsCSIController: true
    tags:
      usage: kubeflow
      team: mlops